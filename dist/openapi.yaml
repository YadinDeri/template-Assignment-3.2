---
openapi: 3.0.0
info:
  title: Recipe API
  description: This is an API for our Recipe website
  contact:
    x-email: yadinde@post.bgu.ac.il edenrivk@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  ## local:
  - url: "http://127.0.0.1:3000"
  ## remote:
  #  - url: "http://132.73.84.129"
  - url: https://virtserver.swaggerhub.com/EDENSAR10_1/ASSI3/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://virtserver.swaggerhub.com/eden/Work3.1API/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://virtserver.swaggerhub.com/eden/TestAPI/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: users
    description: everything about users
  - name: recipes
    description: everything about recipes
  - name: auth
    description: everything about authentication in our website
paths:
  /recipes/{recipe_id}:
    get:
      tags:
        - recipes
      summary: Find recipe by id from the spoonacular API
      description: Return a specific recipe by id from the spoonacular API
      parameters:
        - name: recipe_id
          in: path
          description: "ID of the recipe to return, The ID will appear in the path"
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation - return recipe with the right details about the recipeID from the spoonacular API.
        "404":
          description: Recipe not found
        "500":
          description: Error message
  /recipes/search/query/{searchQuery}/amount/{num}:
    get:
      tags:
        - recipes
      summary: "Searches for recipes based on the {searchQuery} and returns a amount of them."
      description: "Search and return choosen number of recipes based on the {searchQuery} given from the spoonacular API, the number can be either 5/10/15"
      parameters:
        - name: searchQuery
          in: path
          description: Query to send to the search engine of the spoonacular API
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: pasta
        - name: num
          in: path
          description: The amount of recipes to return
          required: true
          style: simple
          explode: false
          schema:
            maximum: 15
            minimum: 5
            type: integer
            example: 5
        - name: cuisine
          in: query
          description: From which cuisine do we search recipe from
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: Israelic
        - name: intolerances
          in: query
          description: Select any intolerances that should be considered when searching for
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: Dairy
        - name: diet
          in: query
          description: "When searching for a recipe, it is important to consider which diet it is intended for, as the recipe should be in accordance with that specific diet."
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: Ketogenic
      responses:
        "200":
          description: successful operation - return recipe with the right details about the recipeID from the spoonacular API.
        "404":
          description: Recipe not found
        "500":
          description: Error message
  /recipes/random3recipes:
    get:
      tags:
        - recipes
      summary: Get random 3 recipes
      description: return random 3 recipe objects
      operationId: Get_Random_3_recipe
      parameters:
        - name: user_id
          in: cookie
          description: User_id for authentication log in
          required: true
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation - return 3 random recipies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipes'
        "400":
          description: The user has not yet watched any recipe.
  /users/createRecipe:
    post:
      tags:
        - users
      summary: Create a recipe to add to the database
      description: Create a new recipe and add it to the local database and user-created recipes
      requestBody:
        description: Recipe to add to the local database and update the user_created_recipes schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipes'
        required: true
      responses:
        "200":
          description: The Recipe successfully added
        "400":
          description: Invalid input or recipe already exists
        "500":
          description: Error occurred while adding the recipe
  /users/favorites:
    get:
      tags:
        - users
      summary: Retrieve all the recipes that the user has marked as favorites.
      description: Retrieve all the recipes that the user has marked as favorites.
      responses:
        "200":
          description: successful operation - return recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipes'
        "500":
          description: Error message
  /users/addFavoriteReciped/:recipe_id:
    post:
      tags:
        - users
      summary: Marking a recipe as a favorite by the user.
      description: "Marking a recipe as a favorite by the user., and add it in the favorite recipes schema"
      parameters:
        - name: recipeId
          in: query
          description: Recipe id to add as a favorite
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "500":
          description: error message
  /users/AllRecipes:
    get:
      tags:
        - users
      summary: Retrieve all the recipes created by a particular user.
      description: Return all the recipes that a user with a certain user_id created
      responses:
        "200":
          description: successful operation - return All recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipes'
        "500":
          description: error message
  /users/user_last_3_watch:
    get:
      tags:
        - users
      summary: Get the 3 most recently watched recipes by the user.
      description: Retrieve the 3 most recently watched recipes by the user.
      operationId: user_last_3_watch
      parameters:
        - name: user_id
          in: cookie
          description: user_id for get the the specofic user last 3 watched recipe
          required: true
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation - return user_last_3_watch
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user_last_3_watch'
        "400":
          description: The user has not yet watched any recipes.
  /users/user_watched_recipe:
    post:
      tags:
        - users
      summary: Update that the User watched in the recipe
      description: Update that the User watched in the recipe by user_id
      operationId: user_watched_recipe
      parameters:
        - name: user_id
          in: cookie
          description: user_id for get the the specofic user last 3 watched recipe
          required: true
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: The Recipe successfully update as an watched recipe
        "400":
          description: there is no user withe the user_id in the system!
  /register:
    post:
      tags:
        - auth
      summary: Registers a user
      description: Registers a new user and adds them to the system.
      requestBody:
        description: User object to be added to the database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        required: true
      responses:
        "201":
          description: User created !
        "400":
          description: "invalid input, object invalid !"
        "409":
          description: Username taken !
        "500":
          description: error message
  /login:
    get:
      tags:
        - auth
      summary: User login
      description: Log in the user to the system.
      parameters:
        - name: username
          in: query
          description: Username for login
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: password
          in: query
          description: password for login
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Login succeeded
        "401":
          description: Username or Password incorrect
  /logout:
    get:
      tags:
        - auth
      summary: Logout a logged user
      description: Logout an already logged in user
      responses:
        "201":
          description: Logout succeeded
components:
  schemas:
    users:
      required:
        - country
        - email
        - firstname
        - lastname
        - password
        - user_id
        - username
      type: object
      properties:
        user_id:
          type: integer
          description: The user_id field is automatically updated and incremented by 1 each time a new user is added to the system.
          example: 1
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: edenrivk
        firstname:
          type: string
          description: user's first name
          example: Eden
        lastname:
          type: string
          description: user's last name
          example: Tzarfaty
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chars, at least one of them is a number and a special char
          format: password
          example: eden1234
        email:
          type: string
          description: user's email
          format: email
          example: eden@gmail.com
    recipes:
      required:
        - glutenFree
        - image
        - ingredients
        - instructions
        - numOfDishes
        - popularity
        - readyInMinutes
        - recipe_id
        - title
        - vegan
        - vegetarain
      type: object
      properties:
        recipe_id:
          type: integer
          description: id of a recipe
          example: 324563
        title:
          maxLength: 25
          minLength: 3
          type: string
          description: username needs to contains between 3 to 25 letters only
          example: Hamburger
        readyInMinutes:
          type: integer
          description: The duration required to prepare this recipe.
          example: 33
        image:
          type: string
          description: URL for the user's pic
          format: URL
          example: https://google.com/pic
        popularity:
          type: integer
          description: "The popularity score, which indicates the number of likes received by this recipe."
          example: 100
        vegan:
          type: boolean
          description: "true if vegan, false if not vegan"
          example: true
        vegetarian:
          type: boolean
          description: "true if vegetarian, false if not vegetarian"
          example: true
        glutenFree:
          type: boolean
          description: "true if gluten free, false if not gluten free"
          example: true
        ingredients:
          type: string
          description: the ingredients of the recipe
          example: butter 1ts
        instructions:
          type: string
          description: Instructions for preparing the recipe.
          example: put it in the oven
        numOfDishes:
          type: integer
          description: Number of dishes you can make with this recipe
          example: 20
    favoriterecipes:
      required:
        - recipe_id
        - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: The user id who favorited a specific recipe.
          example: 1
        recipe_id:
          type: integer
          description: The id of the recipe that a user has favorited.
          example: 100
    user_created_recipes:
      required:
        - recipe_id
        - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: The user id that created a recipe
          example: 1
        recipe_id:
          type: integer
          description: The recipe id of the recipe that a user created
          example: 100
    user_indication_about_recipe:
      required:
        - alreadySaveFlag
        - alreadyWatchFlag
        - recipe_id
        - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: The user id that saved or watched a recipe
          example: 1
        recipe_id:
          type: integer
          description: The recipe id of the recipe that a user saved or watched
          example: 100
        alreadySaveFlag:
          type: boolean
          description: "true if a user has saved a certain recipe with (recipe_id), false if not"
          example: true
        alreadyWatchFlag:
          type: boolean
          description: "true if a user has watched a certain recipe with (recipe_id), false if not"
          example: true
    user_last_3_watch:
      required:
        - History_Watch_R1
        - History_Watch_R2
        - History_Watch_R3
        - user_id
      type: object
      properties:
        user_id:
          type: integer
          description: The user id that watched a recipe
          example: 1
        History_Watch_R1:
          type: integer
          description: The recipe id of the last watched recipe
          example: 12
        History_Watch_R2:
          type: integer
          description: The recipe id of the 2nd last watched recipe
          example: 12
        History_Watch_R3:
          type: integer
          description: The recipe id of the 3rd last watched recipe
          example: 12